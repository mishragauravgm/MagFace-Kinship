#from types import NoneType
from torch.utils.data import Dataset
from PIL import Image
import os
import torch
from torchvision import transforms
import pandas as pd


class TFIWDatasetMagFace(Dataset):
    def __init__(self, transform = None):

        
        self.img_dir = "/home/mishra.g/thesis/data/T-1/all_images/train"
        self.transform = transform

        self.img_names = os.listdir(self.img_dir)

        file_names = []
        labels = []
        for i in self.img_names:
            #print(i[:-3])
            if(i[-3:]=='jpg'):
                file_names.extend([i]) #to remove unwanted files names from the img_names like .DS_Store etc.
                labels.extend([int(i[1:5])])
        self.labels = labels
        self.img_names = file_names

    def __getitem__(self, idx):


        FID_dict = {1: 0,
 2: 1,
 4: 2,
 5: 3,
 7: 4,
 9: 5,
 10: 6,
 11: 7,
 12: 8,
 13: 9,
 15: 10,
 16: 11,
 18: 12,
 20: 13,
 21: 14,
 22: 15,
 23: 16,
 24: 17,
 29: 18,
 31: 19,
 32: 20,
 33: 21,
 35: 22,
 36: 23,
 38: 24,
 39: 25,
 40: 26,
 42: 27,
 43: 28,
 44: 29,
 45: 30,
 46: 31,
 47: 32,
 48: 33,
 50: 34,
 51: 35,
 52: 36,
 53: 37,
 54: 38,
 58: 39,
 59: 40,
 61: 41,
 62: 42,
 63: 43,
 64: 44,
 65: 45,
 66: 46,
 67: 47,
 68: 48,
 69: 49,
 70: 50,
 71: 51,
 73: 52,
 74: 53,
 76: 54,
 77: 55,
 79: 56,
 80: 57,
 81: 58,
 84: 59,
 86: 60,
 87: 61,
 88: 62,
 89: 63,
 90: 64,
 91: 65,
 95: 66,
 96: 67,
 97: 68,
 98: 69,
 101: 70,
 102: 71,
 104: 72,
 105: 73,
 107: 74,
 109: 75,
 110: 76,
 111: 77,
 112: 78,
 113: 79,
 114: 80,
 115: 81,
 116: 82,
 117: 83,
 118: 84,
 119: 85,
 120: 86,
 123: 87,
 124: 88,
 125: 89,
 126: 90,
 127: 91,
 128: 92,
 130: 93,
 131: 94,
 132: 95,
 133: 96,
 135: 97,
 136: 98,
 138: 99,
 139: 100,
 141: 101,
 142: 102,
 143: 103,
 144: 104,
 145: 105,
 147: 106,
 148: 107,
 149: 108,
 150: 109,
 152: 110,
 153: 111,
 154: 112,
 156: 113,
 157: 114,
 159: 115,
 162: 116,
 163: 117,
 165: 118,
 166: 119,
 167: 120,
 168: 121,
 169: 122,
 170: 123,
 171: 124,
 172: 125,
 173: 126,
 174: 127,
 176: 128,
 178: 129,
 179: 130,
 180: 131,
 181: 132,
 182: 133,
 183: 134,
 184: 135,
 186: 136,
 187: 137,
 188: 138,
 190: 139,
 191: 140,
 192: 141,
 194: 142,
 195: 143,
 196: 144,
 197: 145,
 198: 146,
 199: 147,
 200: 148,
 202: 149,
 205: 150,
 206: 151,
 207: 152,
 208: 153,
 209: 154,
 210: 155,
 212: 156,
 213: 157,
 214: 158,
 215: 159,
 216: 160,
 220: 161,
 221: 162,
 225: 163,
 226: 164,
 227: 165,
 228: 166,
 229: 167,
 232: 168,
 233: 169,
 234: 170,
 235: 171,
 236: 172,
 237: 173,
 238: 174,
 239: 175,
 240: 176,
 241: 177,
 242: 178,
 243: 179,
 245: 180,
 246: 181,
 247: 182,
 249: 183,
 250: 184,
 251: 185,
 252: 186,
 253: 187,
 254: 188,
 256: 189,
 257: 190,
 260: 191,
 262: 192,
 263: 193,
 264: 194,
 266: 195,
 267: 196,
 268: 197,
 269: 198,
 270: 199,
 271: 200,
 272: 201,
 273: 202,
 274: 203,
 277: 204,
 278: 205,
 279: 206,
 280: 207,
 281: 208,
 283: 209,
 284: 210,
 286: 211,
 287: 212,
 288: 213,
 289: 214,
 290: 215,
 291: 216,
 293: 217,
 294: 218,
 295: 219,
 296: 220,
 297: 221,
 298: 222,
 299: 223,
 300: 224,
 301: 225,
 302: 226,
 303: 227,
 304: 228,
 305: 229,
 307: 230,
 308: 231,
 309: 232,
 311: 233,
 312: 234,
 314: 235,
 315: 236,
 317: 237,
 318: 238,
 319: 239,
 321: 240,
 322: 241,
 324: 242,
 325: 243,
 326: 244,
 327: 245,
 328: 246,
 330: 247,
 333: 248,
 337: 249,
 338: 250,
 339: 251,
 340: 252,
 342: 253,
 344: 254,
 348: 255,
 350: 256,
 351: 257,
 353: 258,
 354: 259,
 355: 260,
 357: 261,
 358: 262,
 360: 263,
 361: 264,
 362: 265,
 364: 266,
 365: 267,
 368: 268,
 370: 269,
 372: 270,
 373: 271,
 375: 272,
 376: 273,
 377: 274,
 378: 275,
 379: 276,
 380: 277,
 382: 278,
 384: 279,
 386: 280,
 387: 281,
 388: 282,
 389: 283,
 390: 284,
 391: 285,
 392: 286,
 393: 287,
 394: 288,
 395: 289,
 398: 290,
 399: 291,
 401: 292,
 402: 293,
 403: 294,
 407: 295,
 409: 296,
 410: 297,
 411: 298,
 412: 299,
 413: 300,
 415: 301,
 416: 302,
 417: 303,
 418: 304,
 419: 305,
 421: 306,
 422: 307,
 423: 308,
 424: 309,
 425: 310,
 426: 311,
 427: 312,
 428: 313,
 431: 314,
 432: 315,
 434: 316,
 437: 317,
 438: 318,
 439: 319,
 440: 320,
 442: 321,
 443: 322,
 444: 323,
 445: 324,
 446: 325,
 447: 326,
 448: 327,
 449: 328,
 450: 329,
 451: 330,
 453: 331,
 454: 332,
 456: 333,
 457: 334,
 459: 335,
 460: 336,
 463: 337,
 464: 338,
 465: 339,
 466: 340,
 467: 341,
 468: 342,
 469: 343,
 470: 344,
 471: 345,
 473: 346,
 474: 347,
 475: 348,
 476: 349,
 477: 350,
 478: 351,
 481: 352,
 482: 353,
 486: 354,
 487: 355,
 488: 356,
 489: 357,
 490: 358,
 494: 359,
 496: 360,
 497: 361,
 500: 362,
 501: 363,
 503: 364,
 504: 365,
 505: 366,
 506: 367,
 508: 368,
 509: 369,
 510: 370,
 511: 371,
 513: 372,
 514: 373,
 515: 374,
 516: 375,
 517: 376,
 518: 377,
 520: 378,
 521: 379,
 522: 380,
 523: 381,
 525: 382,
 526: 383,
 527: 384,
 528: 385,
 529: 386,
 530: 387,
 531: 388,
 532: 389,
 534: 390,
 535: 391,
 537: 392,
 538: 393,
 539: 394,
 540: 395,
 541: 396,
 542: 397,
 544: 398,
 545: 399,
 547: 400,
 548: 401,
 549: 402,
 550: 403,
 551: 404,
 552: 405,
 556: 406,
 559: 407,
 560: 408,
 561: 409,
 562: 410,
 563: 411,
 565: 412,
 566: 413,
 568: 414,
 569: 415,
 571: 416,
 573: 417,
 574: 418,
 575: 419,
 576: 420,
 578: 421,
 579: 422,
 580: 423,
 581: 424,
 582: 425,
 583: 426,
 585: 427,
 588: 428,
 589: 429,
 590: 430,
 591: 431,
 592: 432,
 595: 433,
 596: 434,
 598: 435,
 600: 436,
 601: 437,
 602: 438,
 603: 439,
 604: 440,
 605: 441,
 607: 442,
 608: 443,
 610: 444,
 611: 445,
 612: 446,
 613: 447,
 615: 448,
 617: 449,
 618: 450,
 620: 451,
 621: 452,
 622: 453,
 623: 454,
 624: 455,
 625: 456,
 627: 457,
 629: 458,
 631: 459,
 632: 460,
 633: 461,
 635: 462,
 636: 463,
 637: 464,
 639: 465,
 641: 466,
 642: 467,
 644: 468,
 645: 469,
 646: 470,
 647: 471,
 649: 472,
 650: 473,
 651: 474,
 652: 475,
 653: 476,
 658: 477,
 659: 478,
 660: 479,
 661: 480,
 662: 481,
 663: 482,
 664: 483,
 665: 484,
 666: 485,
 667: 486,
 669: 487,
 670: 488,
 672: 489,
 673: 490,
 674: 491,
 677: 492,
 678: 493,
 679: 494,
 680: 495,
 681: 496,
 682: 497,
 683: 498,
 684: 499,
 685: 500,
 686: 501,
 687: 502,
 688: 503,
 689: 504,
 690: 505,
 691: 506,
 692: 507,
 693: 508,
 694: 509,
 695: 510,
 696: 511,
 697: 512,
 701: 513,
 702: 514,
 703: 515,
 704: 516,
 705: 517,
 708: 518,
 709: 519,
 711: 520,
 713: 521,
 714: 522,
 715: 523,
 716: 524,
 717: 525,
 718: 526,
 719: 527,
 720: 528,
 722: 529,
 723: 530,
 724: 531,
 726: 532,
 727: 533,
 728: 534,
 729: 535,
 730: 536,
 731: 537,
 733: 538,
 734: 539,
 735: 540,
 736: 541,
 737: 542,
 738: 543,
 739: 544,
 740: 545,
 741: 546,
 742: 547,
 743: 548,
 744: 549,
 745: 550,
 746: 551,
 747: 552,
 748: 553,
 749: 554,
 750: 555,
 751: 556,
 752: 557,
 755: 558,
 757: 559,
 758: 560,
 759: 561,
 760: 562,
 761: 563,
 763: 564,
 764: 565,
 765: 566,
 766: 567,
 767: 568,
 769: 569,
 770: 570,
 771: 571,
 773: 572,
 774: 573,
 776: 574,
 778: 575,
 779: 576,
 780: 577,
 781: 578,
 782: 579,
 783: 580,
 785: 581,
 786: 582,
 788: 583,
 789: 584,
 790: 585,
 791: 586,
 793: 587,
 795: 588,
 796: 589,
 797: 590,
 798: 591,
 800: 592,
 801: 593,
 802: 594,
 804: 595,
 806: 596,
 808: 597,
 809: 598,
 810: 599,
 811: 600,
 812: 601,
 814: 602,
 815: 603,
 816: 604,
 817: 605,
 818: 606,
 820: 607,
 821: 608,
 822: 609,
 825: 610,
 826: 611,
 827: 612,
 829: 613,
 831: 614,
 832: 615,
 833: 616,
 834: 617,
 835: 618,
 836: 619,
 838: 620,
 840: 621,
 841: 622,
 842: 623,
 843: 624,
 844: 625,
 845: 626,
 847: 627,
 848: 628,
 849: 629,
 850: 630,
 851: 631,
 852: 632,
 853: 633,
 856: 634,
 857: 635,
 858: 636,
 860: 637,
 861: 638,
 863: 639,
 865: 640,
 867: 641,
 868: 642,
 869: 643,
 871: 644,
 872: 645,
 873: 646,
 874: 647,
 875: 648,
 878: 649,
 879: 650,
 880: 651,
 881: 652,
 882: 653,
 883: 654,
 884: 655,
 885: 656,
 886: 657,
 887: 658,
 888: 659,
 889: 660,
 890: 661,
 891: 662,
 892: 663,
 893: 664,
 894: 665,
 895: 666,
 896: 667,
 897: 668,
 898: 669,
 899: 670,
 901: 671,
 904: 672,
 905: 673,
 906: 674,
 907: 675,
 909: 676,
 910: 677,
 911: 678,
 912: 679,
 914: 680,
 915: 681,
 916: 682,
 917: 683,
 918: 684,
 919: 685,
 920: 686,
 921: 687,
 922: 688,
 925: 689,
 926: 690,
 927: 691,
 928: 692,
 929: 693,
 930: 694,
 931: 695,
 932: 696,
 933: 697,
 934: 698,
 935: 699,
 936: 700,
 937: 701,
 939: 702,
 940: 703,
 941: 704,
 942: 705,
 943: 706,
 944: 707,
 945: 708,
 946: 709,
 947: 710,
 948: 711,
 949: 712,
 951: 713,
 954: 714,
 955: 715,
 956: 716,
 957: 717,
 959: 718,
 960: 719,
 961: 720,
 963: 721,
 964: 722,
 965: 723,
 966: 724,
 967: 725,
 968: 726,
 969: 727,
 970: 728,
 971: 729,
 972: 730,
 973: 731,
 974: 732,
 975: 733,
 976: 734,
 978: 735,
 979: 736,
 980: 737,
 982: 738,
 984: 739,
 985: 740,
 986: 741,
 987: 742,
 989: 743,
 990: 744,
 991: 745,
 992: 746,
 993: 747,
 994: 748,
 996: 749,
 997: 750,
 998: 751,
 999: 752,
 1001: 753,
 1002: 754,
 1003: 755,
 1004: 756,
 1005: 757,
 1007: 758,
 1013: 759,
 1016: 760,
 1017: 761,
 1018: 762}
        image = Image.open(os.path.join(self.img_dir, self.img_names[idx]))
        if type(image)!=None: #Some images were throwing empty tensors, hence did this.
            if self.transform is not None:
                image = self.transform(image) #, self.labels[idx])
            try:
                #print(self.img_names[idx], self.labels[idx])
                return image, FID_dict[self.labels[idx]]       
            except IndexError:
                print(f"Index is not present for index number {idx}")
            
    def __len__(self):
        return len(self.img_names)

def train_loader(args):
    size = (112,112)
    train_trans = transforms.Compose([
        transforms.RandomHorizontalFlip(),
        transforms.ToTensor(),
        transforms.Resize(size=size),
    ])

    
    train_dataset = TFIWDatasetMagFace(
        transform=train_trans
    )
    train_sampler = None
    train_loader = torch.utils.data.DataLoader(
        train_dataset,
        shuffle=(train_sampler is None),
        batch_size=args.batch_size,
        num_workers=args.workers,
        pin_memory=True,
        sampler=train_sampler,
        drop_last=(train_sampler is None))

    return train_loader